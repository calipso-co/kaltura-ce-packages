#!/bin/bash
ldconfig
# register service
if [ "$1" = "configure" ];then
	update-rc.d kaltura-sphinx defaults || true
	update-rc.d kaltura-populate defaults || true
fi

KALTURA_FUNCTIONS_RC=/opt/kaltura/bin/kaltura-functions.rc
if [ ! -r "$KALTURA_FUNCTIONS_RC" ];then
        OUT="${BRIGHT_RED}ERROR:could not find $KALTURA_FUNCTIONS_RC so, exiting..${NORMAL}"
        echo -en $OUT
        exit 3
fi


. $KALTURA_FUNCTIONS_RC
if [ -r $CONSENT_FILE ];then
	. $CONSENT_FILE
fi
RC_FILE=/etc/kaltura.d/system.ini
if [ ! -r "$RC_FILE" ];then
	echo -e "${BRIGHT_RED}ERROR: could not find $RC_FILE so, exiting..${NORMAL}"
	exit 2
fi
. $RC_FILE
# we might just want to include the sphinx.conf as part of this package instead of kaltura-base, this way, we could just call this code when $1 = 'upgrade'
#if [ -r "$APP_DIR/configurations/sphinx_schema_update" ];then
#	`dirname $0`/kaltura-sphinx-schema-update.sh
#	exit $?
#fi
ln -sf $BASE_DIR/app/configurations/logrotate/kaltura_populate /etc/logrotate.d/
trap 'my_trap_handler "${LINENO}" ${$?}' ERR
TIMEZ=`get_tz`  
send_install_becon `basename $0` $TIMEZ install_start 0 
mkdir -p $LOG_DIR/sphinx/data $APP_DIR/cache//sphinx
chown -R $OS_KALTURA_USER.$OS_KALTURA_USER $APP_DIR/cache/sphinx $LOG_DIR/sphinx $BASE_DIR/sphinx
echo "sphinxServer = $SPHINX_HOST" > /opt/kaltura/app/configurations/sphinx/populate/`hostname`.ini
service kaltura-sphinx restart >/dev/null 2>&1
service kaltura-populate restart >/dev/null 2>&1
#ln -sf $BASE_DIR/app/configurations/monit/monit.d/sphinx.rc /etc/monit/conf.d/
service monit stop >> /dev/null 2>&1
service monit start
send_install_becon `basename $0` $TIMEZ install_success 0
