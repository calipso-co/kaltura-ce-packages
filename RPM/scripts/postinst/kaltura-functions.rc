# if we happen to already have system.ini lets source it
RC_FILE=/etc/kaltura.d/system.ini
if [  -r "$RC_FILE" ];then
	. $RC_FILE
else
	BASE_DIR=/opt/kaltura
fi

POST_INST_MAIL_SUBJECT='Your new Kaltura server is up! and 6 Quick Tips For Smooth Kaltura Maintenance'
POST_INST_MAIL_TMPL=$BASE_DIR/app/configurations/post_inst_mail

call_base_config()
{

	if [ -n "$1" -a -r "$1" ];then
		ANSFILE=$1
		. $ANSFILE
	fi
	if [ ! -r $BASE_DIR/app/base-config.lock ];then
		`dirname $0`/kaltura-base-config.sh $ANSFILE
	else
		echo "base-config skipped as /opt/kaltura/app/base-config.lock was found. Remove the lock to reconfigure."
	fi

}

check_mysql_settings()
{
	DB_USER=$1
	DB_PASSWD=$2
	DB_HOST=$3
	DB_PORT=$4
	RC=0
	OPEN_FILES_LIMIT=`echo "select @@open_files_limit;" | mysql -u$DB_USER -p$DB_PASSWD -h$DB_HOST -P$DB_PORT -N`
	if [ "$OPEN_FILES_LIMIT" -lt 20000 ];then
		MSG="$MSG\nplease set the following in my.cnf and restart the daemon:\nopen_files_limit = 20000"
		RC=1
	fi
	LOWER_CASE_TABLE_NAMES=`echo "select @@lower_case_table_names;" | mysql -u$DB_USER -p$DB_PASSWD -h$DB_HOST -P$DB_PORT -N`
	if [ "$LOWER_CASE_TABLE_NAMES" -ne 1 ];then
		MSG="$MSG\nlower_case_table_names = 1"
		RC=1
	fi
	#INNODB_LOG_FILE_SIZE=`echo "select @@innodb_log_file_size;" | mysql -u$DB_USER -p$DB_PASSWD -h$DB_HOST -P$DB_PORT -N`
	#if [ "$INNODB_LOG_FILE_SIZE" -lt "" ];then
	#	echo "innodb_log_file_size = 32M"
	#	return 1
	#fi
	MAX_ALLOWED_PACKET=`echo "select @@max_allowed_packet;" | mysql -u$DB_USER -p$DB_PASSWD -h$DB_HOST -P$DB_PORT -N`
	if [ "$MAX_ALLOWED_PACKET" -lt "16777216" ];then
		MSG="$MSG\nmax_allowed_packet = 16M"
		RC=1
	fi

	echo -en "$MSG\n"
	return $RC
	
}

check_connectivity()
{
	DB_USER=$1
	DB_PASSWD=$2
	DB_HOST=$3
	DB_PORT=$4
	SPHINX_SERVER=$5
	SERVICE_URL=$6
	RC=0
	MSG="Connectivity test passed:)"
	echo "select version();" | mysql -u$DB_USER -p$DB_PASSWD -h$DB_HOST -P$DB_PORT -N > /dev/null 2>&1
	if [ $? -ne 0 ];then
		MSG="Couldn't connect with mysql -u$DB_USER -p$DB_PASSWD -h$DB_HOST -P$DB_PORT."
		RC=1
	fi
	
	echo "show tables;" | mysql -h$SPHINX_SERVER -P9312  > /dev/null 2>&1
	if [ $? -ne 0 ];then
		MSG="$MSG\nCouldn't connect to Sphinx with mysql -h$SPHINX_SERVER -P9312."
		RC=1
	fi
	curl "$SERVICE_URL/api_v3/index.php?service=system&action=ping" -k  > /dev/null 2>&1
	if [ $? -ne 0 ];then
		MSG="$MSG\nCouldn't make an API request to $SERVICE_URL/api_v3/index.php?service=system&action=ping."
		RC=1
	fi

	echo -en "$MSG\n"
	return $RC
	
}

# ssl functions
check_cert_key()
{
	CRT_FILE=$1
	KEY_FILE=$2
	# check key and crt match
	CRT_SUM=`openssl x509 -in $CRT_FILE -modulus -noout | openssl md5`
	KEY_SUM=`openssl rsa -in $KEY_FILE -modulus -noout | openssl md5`
	if [ "$CRT_SUM" != "$KEY_SUM" ];then
		echo "

	MD5 sums between .key and .crt files DO NOT MATCH
	# openssl rsa -in $KEY_PATH -modulus -noout | openssl md5
	$KEY_HASH
	# openssl x509 -in $CERT_PATH -modulus -noout | openssl md5
	$CRT_HASH

	"
		return 1
	fi

}

is_self_signed()
{
	# check if cert is self signed:
	CRT_FILE=$1
	if openssl verify  $CRT_FILE | grep 'self signed certificate' -q ;then
		echo "

	WARNING: self signed cerificate detected. Will set settings.clientConfig.verifySSL=0 in $APP_DIR/configurations/admin.ini.


	"
		return 1
	fi
}

configure_apache_ssl()
{
	KALTURA_SSL_CONFFILE=$1
	if [ -f /etc/httpd/conf.d/ssl.conf ];then
		echo "Moving /etc/httpd/conf.d/ssl.conf to /etc/httpd/conf.d/ssl.conf.ks.bak."
		mv /etc/httpd/conf.d/ssl.conf /etc/httpd/conf.d/ssl.conf.ks.bak
	fi
	sed -i "s#@SSL_CERTIFICATE_FILE@#$CRT_FILE#g" $KALTURA_SSL_CONFFILE
	sed -i "s#@SSL_CERTIFICATE_KEY_FILE@#$KEY_FILE#g" $KALTURA_SSL_CONFFILE
	ln -fs $KALTURA_SSL_CONFFILE /etc/httpd/conf.d/  
}

send_post_inst_msg()
{
	MAILTO=$1
	mail -s "$POST_INST_MAIL_SUBJECT" -r "Kaltura Video Platform <kaltura@$KALTURA_VIRTUAL_HOST_NAME>" $MAILTO < $POST_INST_MAIL_TMPL 
	
}
