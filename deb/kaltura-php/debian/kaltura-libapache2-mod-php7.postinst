#!/bin/sh

set -e

#DEBHELPER#

reload_apache()
{
	if apache2ctl configtest 2>/dev/null; then
		invoke-rc.d apache2 $1 || true
	else
		echo "Your apache2 configuration is broken, so we're not restarting it for you."
	fi
}

# we've registered a trigger to handle extension updates.
if [ "$1" = "triggered" ] && [ "$2" = "/opt/kaltura/app/configurations/php/conf.d" ]; then
  reload_apache force-reload
  exit 0
elif [ "$1" != "configure" ]; then
  exit 0
fi

phpini="/opt/kaltura/app/configurations/php/apache2/php.ini"

ucf /opt/kaltura/share/php7/php.ini-production $phpini
#ucfr kaltura-libapache2-mod-php7 $phpini

if [ -n "$2" ]; then
	# recover the previous state
	if [ -e /opt/kaltura/app/configurations/php/apache2/.start ]; then
	    a2dismod mpm_event >/dev/null ||true
	    a2enmod mpm_prefork >/dev/null ||true
	    a2enmod php7 >/dev/null || true
	    a2dismod php5 >/dev/null || true
	    rm -f /opt/kaltura/app/configurations/php/apache2/.start
	fi
# we're upgrading. test if we're enabled, and if so, restart to reload the module.
	if [ -e /etc/apache2/mods-enabled/php7.load ]; then
		reload_apache force-reload
	fi
        exit 0
fi

if [ -e /etc/apache2/apache2.conf ]; then
# Enable the module, but hide a2enmod's misleading message about apachectl
# and force-reload the thing ourselves.
	a2dismod mpm_event >/dev/null ||true
	a2enmod mpm_prefork >/dev/null ||true
        a2enmod php7 >/dev/null || true
        a2dismod php5 >/dev/null || true
	reload_apache restart
fi

exit 0
